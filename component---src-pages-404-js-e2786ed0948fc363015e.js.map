{"version":3,"file":"component---src-pages-404-js-e2786ed0948fc363015e.js","mappings":"uLAgDA,MA5CiB,KACf,MAAMA,GAAOC,EAAAA,EAAAA,gBAAe,cAgBtBC,EAAaF,EAAKG,kBAAkBC,MACpCC,EAAaL,EAAKG,kBAAkBG,WAE1C,OACE,0BACE,gBAAC,EAAAC,KAAI,CAACC,GAAG,KAAI,UAAQH,EAAW,KAC/BH,EAAWO,KAAI,CAACC,EAAUC,IACzB,uBAAKC,IAAKD,GACR,gBAAC,EAAAJ,KAAI,CAACC,GAAE,aAAeE,EAASG,WAAU,KACvCH,EAASG,WAAW,KAAGH,EAASJ,WAAW,KAE9C,0BACGI,EAASI,cAAcL,KAAI,CAACM,EAAaJ,IACxC,gBAAC,EAAAJ,KAAI,CACHC,GAAE,aAAeE,EAASG,WAAU,IAAIE,EAAYF,WAAU,IAC9DD,IAAKD,GAEJI,EAAYF,WAAW,KAAGE,EAAYT,WAAW,WAMzD,ECPT,MAjCe,IAAgD,IAA/C,SAAEU,EAAQ,MAAEC,EAAK,SAAEC,EAAQ,WAAEC,GAAY,EACvD,MACMC,EAD6B,MAChBJ,EAASK,SAC5B,IAAIC,EAgBJ,OAbEA,EADEF,GAAcD,EAEd,sBAAII,UAAU,gBACZ,gBAAC,EAAAhB,KAAI,CAACC,GAAG,KAAKS,IAKhB,gBAAC,EAAAV,KAAI,CAACgB,UAAU,mBAAmBf,GAAG,KACnCS,GAML,uBAAKM,UAAU,iBAAiB,oBAAmBH,GACjD,0BAAQG,UAAU,iBAAiBD,GACnC,gBAAC,EAAQ,MACT,4BAAOJ,GACP,8BAAQ,MACH,IAAIM,MAAOC,cAAc,eAC5B,IACA,qBAAGC,KAAK,4BAA2B,WAEjC,C,+CCgBV,IAvCY,IAAuC,IAAD,UAArC,YAAEC,EAAW,MAAEV,EAAK,SAAEC,GAAU,EAC3C,MAAM,KAAEU,IAAS3B,EAAAA,EAAAA,gBAAe,cAgB1B4B,EAAkBF,GAAeC,EAAKE,aAAaH,YACnDI,EAAgC,QAApB,EAAGH,EAAKE,oBAAY,aAAjB,EAAmBb,MAExC,OACE,gCACE,6BAAQc,EAAkBd,EAAK,MAAMc,EAAiBd,GACtD,wBAAMe,KAAK,cAAcC,QAASJ,IAClC,wBAAMK,SAAS,WAAWD,QAAShB,IACnC,wBAAMiB,SAAS,iBAAiBD,QAASJ,IACzC,wBAAMK,SAAS,UAAUD,QAAQ,YACjC,wBAAMD,KAAK,eAAeC,QAAQ,YAClC,wBACED,KAAK,kBACLC,SAA0B,QAAjB,EAAAL,EAAKE,oBAAY,OAAQ,QAAR,EAAjB,EAAmBK,cAAM,WAAR,EAAjB,EAA2BC,UAAO,KAE7C,wBAAMJ,KAAK,gBAAgBC,QAAShB,IACpC,wBAAMe,KAAK,sBAAsBC,QAASJ,IACzCX,EACA,C,kGCvCP,MAWamB,EAAO,IAAM,gBAAC,IAAG,CAACpB,MAAM,mBAErC,UAbqB,IAAyB,IAAxB,KAAEjB,EAAI,SAAEgB,GAAU,EACtC,MAAMsB,EAAYtC,EAAK4B,KAAKE,aAAab,MAEzC,OACE,gBAAC,IAAM,CAACD,SAAUA,EAAUC,MAAOqB,GACjC,0BAAI,kBACJ,yBAAG,2DACI,C","sources":["webpack://gatsby-starter-blog/./src/templates/category.js","webpack://gatsby-starter-blog/./src/components/layout.js","webpack://gatsby-starter-blog/./src/components/seo.js","webpack://gatsby-starter-blog/./src/pages/404.js"],"sourcesContent":["import React from \"react\"\r\nimport { Link } from \"gatsby\"\r\nimport { useStaticQuery, graphql } from \"gatsby\"\r\n\r\nconst Category = () => {\r\n  const data = useStaticQuery(graphql`\r\n    query {\r\n      allMarkdownRemark {\r\n        totalCount\r\n        group(field: frontmatter___main) {\r\n          totalCount\r\n          fieldValue\r\n          subcategories: group(field: frontmatter___sub) {\r\n            totalCount\r\n            fieldValue\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `)\r\n\r\n  const categories = data.allMarkdownRemark.group\r\n  const totalPosts = data.allMarkdownRemark.totalCount\r\n\r\n  return (\r\n    <ul>\r\n      <Link to=\"/\">전체 보기 ({totalPosts})</Link>\r\n      {categories.map((category, index) => (\r\n        <div key={index}>\r\n          <Link to={`/category/${category.fieldValue}/`}>\r\n            {category.fieldValue} ({category.totalCount})\r\n          </Link>\r\n          <ul>\r\n            {category.subcategories.map((subcategory, index) => (\r\n              <Link\r\n                to={`/category/${category.fieldValue}/${subcategory.fieldValue}/`}\r\n                key={index}\r\n              >\r\n                {subcategory.fieldValue} ({subcategory.totalCount})\r\n              </Link>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      ))}\r\n    </ul>\r\n  )\r\n}\r\n\r\nexport default Category\r\n","import * as React from \"react\"\r\nimport { Link } from \"gatsby\"\r\nimport Category from \"../templates/category\"\r\n\r\nconst Layout = ({ location, title, children, isCategory }) => {\r\n  const rootPath = `${__PATH_PREFIX__}/`\r\n  const isRootPath = location.pathname === rootPath\r\n  let header\r\n\r\n  if (isRootPath || isCategory) {\r\n    header = (\r\n      <h1 className=\"main-heading\">\r\n        <Link to=\"/\">{title}</Link>\r\n      </h1>\r\n    )\r\n  } else {\r\n    header = (\r\n      <Link className=\"header-link-home\" to=\"/\">\r\n        {title}\r\n      </Link>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className=\"global-wrapper\" data-is-root-path={isRootPath}>\r\n      <header className=\"global-header\">{header}</header>\r\n      <Category></Category>\r\n      <main>{children}</main>\r\n      <footer>\r\n        © {new Date().getFullYear()}, Built with\r\n        {` `}\r\n        <a href=\"https://www.gatsbyjs.com\">Gatsby</a>\r\n      </footer>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Layout\r\n","/**\r\n * SEO component that queries for data with\r\n * Gatsby's useStaticQuery React hook\r\n *\r\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\r\n */\r\n\r\nimport * as React from \"react\"\r\nimport { useStaticQuery, graphql } from \"gatsby\"\r\n\r\nconst Seo = ({ description, title, children }) => {\r\n  const { site } = useStaticQuery(\r\n    graphql`\r\n      query {\r\n        site {\r\n          siteMetadata {\r\n            title\r\n            description\r\n            social {\r\n              twitter\r\n            }\r\n          }\r\n        }\r\n      }\r\n    `\r\n  )\r\n\r\n  const metaDescription = description || site.siteMetadata.description\r\n  const defaultTitle = site.siteMetadata?.title\r\n\r\n  return (\r\n    <>\r\n      <title>{defaultTitle ? `${title} | ${defaultTitle}` : title}</title>\r\n      <meta name=\"description\" content={metaDescription} />\r\n      <meta property=\"og:title\" content={title} />\r\n      <meta property=\"og:description\" content={metaDescription} />\r\n      <meta property=\"og:type\" content=\"website\" />\r\n      <meta name=\"twitter:card\" content=\"summary\" />\r\n      <meta\r\n        name=\"twitter:creator\"\r\n        content={site.siteMetadata?.social?.twitter || ``}\r\n      />\r\n      <meta name=\"twitter:title\" content={title} />\r\n      <meta name=\"twitter:description\" content={metaDescription} />\r\n      {children}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Seo\r\n","import * as React from \"react\"\r\nimport { graphql } from \"gatsby\"\r\n\r\nimport Layout from \"../components/layout\"\r\nimport Seo from \"../components/seo\"\r\n\r\nconst NotFoundPage = ({ data, location }) => {\r\n  const siteTitle = data.site.siteMetadata.title\r\n\r\n  return (\r\n    <Layout location={location} title={siteTitle}>\r\n      <h1>404: Not Found</h1>\r\n      <p>You just hit a route that doesn&#39;t exist... the sadness.</p>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport const Head = () => <Seo title=\"404: Not Found\" />\r\n\r\nexport default NotFoundPage\r\n\r\nexport const pageQuery = graphql`\r\n  query {\r\n    site {\r\n      siteMetadata {\r\n        title\r\n      }\r\n    }\r\n  }\r\n`\r\n"],"names":["data","useStaticQuery","categories","allMarkdownRemark","group","totalPosts","totalCount","Link","to","map","category","index","key","fieldValue","subcategories","subcategory","location","title","children","isCategory","isRootPath","pathname","header","className","Date","getFullYear","href","description","site","metaDescription","siteMetadata","defaultTitle","name","content","property","social","twitter","Head","siteTitle"],"sourceRoot":""}