{"componentChunkName":"component---src-templates-blog-post-js","path":"/react/customHook/useAxios로네트워크요청분리하기/","result":{"data":{"site":{"siteMetadata":{"title":"GPT 하수인의 개발자 이야기"}},"mdx":{"id":"094d73f2-dd7d-54e0-b75a-a548070418b6","excerpt":"","body":"\r\n<section>\r\n\r\n<h3>useAxios가 뭔가요?</h3>\r\n\r\n<p>\r\nuseState, useEffect를 이용해 api 요청하는 코드를 다루는 훅이다.. url를 인자로 받아서 컴포넌트 내에서 간단하게 서버에서 받아온 정보를 받을 수 있는 것을\r\n목표로 작성하였다.\r\n</p>\r\n\r\n<h3>왜 만들게 되었나요?</h3>\r\n\r\n<p>이전에 구직 과제 테스트를 하던 중, 컴포넌트 한 곳에 모든 로직을 다 섞어 놓고 있다는 생각이 들었다. 이미 렌더링 하기 위한 코드도 수두룩한데, 데이터를 불러오기 \r\n위한 코드도 한 곳에 다 뭉쳐 있으니, 가독성이 너무 떨어져 보였다. 그래서 해당 부분을 따로 빼서 관리하자는 생각에서 만들어 보게 되었다.</p>\r\n\r\n<h3>어떻게 구성 하였나요?</h3>\r\n\r\n<p>처음 단계에서는 useAxios.js라는 파일을 만들어, useState를 통한 상태 관리와, axios 요청을 한 함수에 담았다. 하지만 나중에 api 요청의 종류가 많아지면 이 훅 자체도\r\n상당히 길어질 것이란 생각이 들었다. 그래서 useAxios.js 파일에서는 상태의 변화만 담당하고, api 요청을 담당하는 함수를 따로 만들었다. 즉, customHook 폴더와, api 폴더로 나누어\r\n작성하였다.</p>\r\n\r\n<h3>시작해 보자</h3>\r\n\r\n<p>사용될 api와 그에 맞춘 코드를 작성</p>\r\n\r\n<Highlighter code='// ./api/fetchData.js\r\nimport axios from \"axios\";\r\n\r\nconst urlMap = {           // 각 요청에 맞춰 처리하는 코드를 작성. 함수 내에서 if문으로 처리하면 함수가 길어질 것 같아, 객체로 분리.\r\n  \"https://example.com\": (url) =>\r\n    axios.get(url).then((res) => res.data.message),\r\n  \"https://example.com/test\": (url) =>\r\n    axios.get(url).then((res) => res.data.result),\r\n};\r\n\r\nasync function fetchData(url) {\r\n  const fetchDataFunc = urlMap[url];\r\n\r\n  if (fetchDataFunc) {\r\n    return await fetchDataFunc(url);\r\n  } else {\r\n    throw new Error(\"Invalid URL: ${url}\");   // 에러 처리\r\n  }\r\n}\r\n\r\nexport default fetchData;'></Highlighter>\r\n\r\n<p>useState를 통해 url에서 받아온 데이터를 상태로 저장 (useAxios 훅 생성)</p>\r\n\r\n<Highlighter code='// ./customHook/useAxios.js\r\nimport react, { useState, useEffect } from \"react\";\r\nimport fetchData from \"../api/fetchData\";\r\n\r\nfunction useAxios(url) {\r\n  const [data, setData] = useState([]);\r\n\r\n  useEffect(() => {                      \r\n    async function fetchDataAsync() {     // fetchData.js에서 만든 함수를 이용해 url에서 데이터를 받아서 상태에 저장\r\n      const result = await fetchData(url);\r\n      setData(result);\r\n    }\r\n\r\n    fetchDataAsync();\r\n  }, [url]);\r\n\r\n  return data;\r\n}\r\n\r\nexport default useAxios;'></Highlighter>\r\n\r\n<p>useAxios 훅을 통해 컴포넌트 내에서 간단하게 데이터 받아오기</p>\r\n\r\n<Highlighter code='import \"./App.css\";\r\nimport useAxios from \"./customHook/useAxios\";\r\n\r\nfunction App() {\r\n  const data = useAxios(\"https://example.com\");    // 적용할 url을 인자로 넣어 줌\r\n  const data2 = useAxios(\"https://example.com/test\");\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div>{data}</div>\r\n      <div>{data2}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n'></Highlighter>\r\n\r\n<h3>완성 코드로 보기</h3>\r\n\r\n<Codesandbox url='https://codesandbox.io/p/sandbox/useaxios-6fu6b9?file=%2Fsrc%2FApp.js&selection=%5B%7B%22endColumn%22%3A23%2C%22endLineNumber%22%3A1%2C%22startColumn%22%3A23%2C%22startLineNumber%22%3A1%7D%5D' title='useAxios'></Codesandbox>\r\n\r\n</section>","frontmatter":{"title":"[react, customHook] useAxios로 네트워크 요청 코드 분리하기","date":"April 10, 2023","description":"useAxios 커스텀 훅을 이용해 코드를 분리하자."}}},"pageContext":{"id":"094d73f2-dd7d-54e0-b75a-a548070418b6"}},"staticQueryHashes":["2811435942","2841359383","3235552843","3257411868"],"slicesMap":{}}