{"componentChunkName":"component---src-templates-blog-post-js","path":"/react/테스트/axiosMockAdapter로가짜서버만들기/","result":{"data":{"site":{"siteMetadata":{"title":"GPT 하수인의 개발자 이야기"}},"mdx":{"id":"35d5e34c-954c-57b4-a6d1-e51ad1ae1c16","excerpt":"","body":"\r\n<section>\r\n\r\n<Qna texts='[\"AI님, axiosmockadapter가 뭔가요?\", \"axiosmockadapter는 axios를 사용하는 JavaScript 프로젝트에서 mock adapter를 구현하는 데 사용되는 라이브러리입니다.\r\naxiosmockadapter는 axios 라이브러리와 함께 사용할 수 있으며, axios를 통해 수행되는 HTTP 요청을 가로채서 가짜 응답을 반환하도록 설정할 수 있습니다. 이를 통해 개발자는 실제 서버에 대한 요청 없이도 API 호출을 시뮬레이션하고 테스트할 수 있습니다.\"]'></Qna>\r\n\r\n<h3>axios-mock-adapter가 뭔가요?</h3>\r\n\r\n<p>\r\n쉽게 말해, 가짜 서버를 만드는데 사용하는 라이브러리다. json-server를 사용해봤다면 비슷한 역할을 한다고 볼 수 있다. 구동방식은 react내에서 URL로 네트워크 요청을 보낼 때에, 해당\r\n요청을 가로챈다. 예를 들어 axios-mock-adapter로 'https://example.com'으로 요청을 가로챈다고 해보자. 그러면 프로젝트 내에서 해당 URL로 보내면 진짜 요청이 가는게 아니라, 내가 생성한\r\n가짜 응답이 반환된다. \r\n</p>\r\n\r\n<h3>json-server에 비해 어떤 차이가 있나요?</h3>\r\n\r\n<p>\r\n1. localhost가 아닌 실제 URL로 작성해도 되서 편리하다. <br />\r\njson-server의 경우, localhost의 포트로 열기 때문에, 네트워크 요청도 해당 localhost 포트로 보내줘야 한다. 결국, 최종적으로 진짜 서버로 연결할 때에는 서버의 URL로 모두 바꿔줘야 하는 \r\n불편함이 있다. 반면, axios-mock-adapter는 url은 그대로 입력하되, 그 요청을 가로채는 과정으로 실행되므로, 서버가 완성된 이후에는 가로채는 부분만 삭제하면 되는 이점이 있다.\r\n</p>\r\n\r\n<p>2. json 형태가 아닌 js 파일로 작성하여 좀더 유연한 조작이 가능하다. <br />json-server는 가짜 서버의 작성을 json을 통해 한다. 그러다보니 클라이언트에서 보낸 값에 특정 작업을 실행되어야 할 경우, 조작하기가 어렵다. 반면, axios-mock-adapter는 콜백함수의 형태로\r\n어떤 데이터를 보낼지 만들 수 있다 보니, 조작이 좀더 자유로운 특징이 있다. </p>\r\n\r\n<h3>사용해보자</h3>\r\n\r\n<p>axios-mock-adapter 설치</p>\r\n<Highlighter code='npm i axios;\r\nnpm i axios-mock-adapter --save-dev'></Highlighter>\r\n\r\n<p>\r\n테스트하고자 하는 코드를 작성. <br />\r\n코드 분리를 위해 mock 폴더에 example.js 파일에 작성\r\n</p>\r\n\r\n<Highlighter code='import axios from \"axios\";\r\nimport MockAdapter from \"axios-mock-adapter\";\r\n\r\nconst mock = new MockAdapter(axios);\r\n\r\nmock.onGet(\"https://example.com/post/read\").reply((config) => {    // HTTP 요청 메서드에 맞춰 줌.\r\n  return [200, { message: \"쿼리 스트링으로 1 받았습니다.\" }];\r\n});\r\n\r\nmock.onPost(\"https://example.com/post/post\").reply((config) => {\r\n  return [200, { message: \"본문으로 1 받았습니다.\" }];\r\n});\r\n\r\nexport default mock;\r\n'></Highlighter>\r\n\r\n<p>해당 URL로 요청 보내는 곳에 작성한 테스트 코드 불러오기</p>\r\n\r\n<Highlighter code='import { useEffect } from \"react\";\r\nimport \"./App.css\";\r\nimport axios from \"axios\";\r\nimport mock from \"./mock/example\";\r\n\r\nfunction App() {\r\n  useEffect(() => {\r\n    async function getData() {\r\n      const result = await axios.get(\"https://example.com/post/read\", {\r\n        params: {\r\n          post: 1,\r\n        },\r\n      });\r\n      console.log(\"getData의 결과는\", result.data);\r\n    }\r\n\r\n    async function postData() {\r\n      const result = await axios.post(\"https://example.com/post/post\", {\r\n        data: {\r\n          post: 1,\r\n        },\r\n      });\r\n      console.log(\"postData의 결과는\", result.data);\r\n    }\r\n\r\n    getData();\r\n    postData();\r\n  }, []);\r\n\r\n  return <div className=\"App\">잘 되나 테스트</div>;\r\n}\r\n\r\nexport default App;\r\n'></Highlighter>\r\n\r\n</section>","frontmatter":{"title":"[react, 테스트] axiosMockAdapter로 가짜 서버 만들기","date":"April 10, 2023","description":"axiosMockAdapter로 가짜 서버를 만들어 보자."}}},"pageContext":{"id":"35d5e34c-954c-57b4-a6d1-e51ad1ae1c16"}},"staticQueryHashes":["2811435942","2841359383","3235552843","3257411868"],"slicesMap":{}}