{"componentChunkName":"component---src-templates-blog-post-js","path":"/react/전역상태관리/mobx를사용해보자/","result":{"data":{"site":{"siteMetadata":{"title":"GPT 하수인의 개발자 이야기"}},"mdx":{"id":"cbb51802-1cdb-53bf-b4ce-88ccbc1ab13c","excerpt":"","body":"\r\n<section>\r\n\r\n<Qna texts='[\"AI님, mobx가 뭔가요?\", \"Mobx는 자바스크립트 상태 관리 라이브러리 중 하나입니다. 일반적으로 React와 함께 사용됩니다. 클래스와 데코레이터를 사용하여 상태와 액션을 정의합니다.\"]'></Qna>\r\n\r\n<h3>mobx가 뭔가요?</h3>\r\n\r\n<p>Mobx는 redux처럼 react 내에서 전역 상태 관리를 할 때에 사용하는 라이브러리다. 당연하게도 상태 값이 변하면 리렌더링이 된다. mobx는 class로 만들어서 사용한다. 관리하는 상태 값은\r\n클래스의 프로퍼티로 지정하고, 상태를 변경하는 함수는 클래스의 메서드로 만든다. </p>\r\n\r\n<h3>mobx를 이용하면 redux에 비해 어떤 장점, 단점이 있나요?</h3>\r\n\r\n<p>\r\n장점 <br/>\r\n1. 코드량이 적다.(boilerplate가 적다.) <br></br>\r\n리덕스를 사용한다고 한다고 가정해 보자. 우선 action을 만들고, 또 action에 맞춰, reducer를 만든다. 그리고 그렇게 만든 reducer를 합칠 store를 생성하고, 전체 앱을 Proiver로 감싸준다.\r\n과정이 험난하다보니, 새로운 액션을 추가하려고 하면 눈앞이 아찔하다. 오죽하면 그 과정을 줄이기 위해 redux toolkit 까지 나왔겠는가. 하지만 redux에 비해 mobx는 코드가 비교적 간편하다.\r\n그냥 class 하나 만들어서 거기에 프로퍼티랑 메서드만 만들어 주면 끝이다. 즉, 간편하다. <br/> <br/>\r\n\r\n2. 비동기 처리가 간편하다 <br />\r\n리덕스의 경우 비동기 처리를 하려면 redux-saga와 같은 미들웨어를 이용해야 한다. 하지만 mobx는 메서드에 async-await 키워드를 사용하는 것만으로도 비동기 처리가 가능하다. \r\n</p>\r\n\r\n<p>\r\n단점 <br/>\r\n1. redux와 비교해 점유율이 낮다. <br />\r\nmobx는 리덕스와 비교해 점유율이 다소 낮은 편이다. redux는 점유율이 높기에 관련 자료를 찾을 때에 좀더 원활하다. 또한 레거시 코드들은 redux를 사용하고 있을 가능성이 높다. <br />\r\n</p>\r\n\r\n<AttachedImage data='[\"https://user-images.githubusercontent.com/79782594/230772109-78c58400-4e09-4477-8cdf-c13db49ad347.png\", \"redux 점유율이 압도적이다.\"]'></AttachedImage>\r\n\r\n<h3>사용해 보자</h3>\r\n\r\n<p>mobx 설치하기</p>\r\n<Highlighter code='npm install --save mobx mobx-react-lite'></Highlighter>\r\n\r\n<p>\r\nstore 만들기 <br />\r\nstore 폴더 안에 counterStore.js를 생성한다.\r\n</p>\r\n\r\n<Highlighter code='//store.counterStore.js\r\n\r\nimport { makeAutoObservable } from \"mobx\";\r\n\r\nclass CounterStore {\r\n  count = 0;\r\n\r\n  constructor() {\r\n    makeAutoObservable(this);\r\n  }\r\n\r\n  increment() {\r\n    this.count++;\r\n  }\r\n\r\n  decrement() {\r\n    this.count--;\r\n  }\r\n}\r\n\r\nexport default new CounterStore();\r\n'></Highlighter>\r\n\r\n<p>observer를 통해 상태를 감지, 변경시킨다.</p>\r\n\r\n<Highlighter code='import { observer } from \"mobx-react-lite\";\r\nimport counterStore from \"./store/counterStore\";\r\nimport \"./App.css\";\r\nimport Test from \"./Test\";\r\n\r\nconst App = observer(() => {   // observer로 사용.\r\n  const handleIncrease = () => {\r\n    counterStore.increment();   // class에서 지정한 메서드로 상태 변경\r\n  };\r\n\r\n  const handleDecrease = () => {\r\n    counterStore.decrement();   \r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={handleDecrease}>-</button>\r\n      <span>{counterStore.count}</span>   // class의 프로퍼티로 상태 불러오기\r\n      <button onClick={handleIncrease}>+</button>\r\n\r\n      <Test></Test>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default App;\r\n'></Highlighter>\r\n\r\n<AttachedImage data='[\"https://user-images.githubusercontent.com/79782594/230773088-db6a63ff-207e-485c-9014-fcf3cbe242d6.png\", \"상태 관리계의 Hello, World!, 카운터로 구현한 예시(사진임)\"]'></AttachedImage>\r\n\r\n\r\n</section>","frontmatter":{"title":"[react, 전역상태관리] mobx 사용법만 배워보자","date":"April 09, 2023","description":"mobx 간단 사용법만 배워보자."}}},"pageContext":{"id":"cbb51802-1cdb-53bf-b4ce-88ccbc1ab13c"}},"staticQueryHashes":["2811435942","2841359383","3235552843","3257411868"],"slicesMap":{}}