{"componentChunkName":"component---src-templates-blog-post-js","path":"/react/기능구현/컴포넌트등작,삭제시애니메이션주기/","result":{"data":{"site":{"siteMetadata":{"title":"GPT 하수인의 개발자 이야기"}},"mdx":{"id":"9734a1b7-676a-5555-920e-c9d326a46afd","excerpt":"","body":"\r\n<section>\r\n\r\n<h3>왜 굳이 react-transition-group 라이브러리를 사용하나요? 그냥 만들어도 되지 않나요?</h3>\r\n\r\n<p>마운트 시 애니메이션을 적용하는 것은 쉽다. 그냥 해당 컴포넌트의 class에 애니메이션이 실행되는 class를 넣어주면 된다. 하지만 문제는 언마운트 시에 실행될 애니메이션이다.\r\n보통 컴포넌트가 마운트, 언마운트 될 때의 기준을 하나의 상태 값으로 잡기 마련이다. 예를 들어, 버튼을 하나 누르면 해당 상태값이 false로 변하면서 컴포넌트가 언마운트 된다. 하지만\r\n언마운트 시 애니메이션이 실행된다면, 해당 애니메이션이 끝난 이후에 컴포넌트가 사라지도록 상태 값 변하는 함수를 애니메이션이 끝날 때까지 지연시켜야 한다. 애니메이션이 0.3초 실행된다면\r\n상태 변화함수를 setTimeout을 이용해 0.3초 이후에 실행시키든 하는 과정이 필요하다. react-transition-group 라이브러리를 사용하면 그러한 과정을 좀더 간결하게 표현할 수 있기에 선택하게\r\n되었다.</p>\r\n\r\n<h3>어떻게 사용하나요?</h3>\r\n\r\n<p>react-transition-group 라이브러리를 설치</p>\r\n\r\n<Highlighter code='npm i react-transition-group'></Highlighter>\r\n\r\n<p>애니메이션 만들기</p>\r\n\r\n<Highlighter code='//index.css\r\n\r\n.fade-enter {     // 컴포넌트 마운트 시 애니메이션 시작할때의 css 설정.\r\n  transform: translateX(-300px);\r\n}\r\n\r\n.fade-enter-active {   // 컴포넌트 마운트 시 애니메이션 끝났을 때의 css 설정.\r\n  transform: translateX(0);\r\n  transition: transform 300ms ease-in-out;\r\n}\r\n\r\n.fade-exit {            // 컴포넌트 언마운트 시 애니메이션 시작할 때의 css 설정.\r\n  transform: translateX(0);\r\n}\r\n\r\n.fade-exit-active {     // 컴포넌트 언마운트 시 애니메이션 끝났을 때의 css 설정.\r\n  transform: translateX(-300px);\r\n  transition: transform 300ms ease-in-out;\r\n}'></Highlighter>\r\n\r\n<p>CSSTransition 컴포넌트로 애니메이션 실행할 컴포넌트 감싸주기</p>\r\n\r\n<Highlighter code='import { useState } from \"react\";\r\nimport { CSSTransition } from \"react-transition-group\";    // 라이브러리에서 불러오기.\r\n\r\nfunction App() {\r\n  const [isShow, setIsShow] = useState(false);     // 컴포넌트 렌더링 조건을 담당하는 state 값.\r\n\r\n  const toggle = () => {\r\n    setIsShow((prevState) => !prevState);\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <button onClick={toggle}>{isShow ? \"Hide\" : \"Show\"}</button>     // 버튼을 눌러서 컴포넌트 렌더링 여부 달라짐.\r\n      <CSSTransition \r\n        in={isShow}       // 애니메이션의 실행 기준이 되는 상태 값.\r\n        timeout={300}     // 애니메이션의 실행시간.\r\n        classNames=\"fade\"   // 애니메이션의 class 명\r\n        unmountOnExit>      // 애니메이션 실행된 이후 unmount 할 것인지에 대한 설정. 해당 값이 true면 fade-exit 애니메이션이 실행된 이후 컴포넌트가 사라짐.\r\n        <div>애니메이션</div>  \r\n      </CSSTransition>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;'></Highlighter>\r\n\r\n<Codesandbox url='https://codesandbox.io/p/sandbox/react-transition-group-prac-v3x4x2?file=%2Fsrc%2Fstyles.css&selection=%5B%7B%22endColumn%22%3A27%2C%22endLineNumber%22%3A2%2C%22startColumn%22%3A27%2C%22startLineNumber%22%3A2%7D%5D' title='react-transition-group-prac'></Codesandbox>\r\n\r\n</section>","frontmatter":{"title":"[react, 기능구현] 컴포넌트 등작, 삭제 시 애니메이션 실행하기","date":"April 12, 2023","description":"react-transition-group 라이브러리로 마운트, 언마운트 시 애니메이션을 넣어보자."}}},"pageContext":{"id":"9734a1b7-676a-5555-920e-c9d326a46afd"}},"staticQueryHashes":["2811435942","2841359383","3235552843","3257411868"],"slicesMap":{}}