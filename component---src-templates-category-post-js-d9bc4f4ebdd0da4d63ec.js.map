{"version":3,"file":"component---src-templates-category-post-js-d9bc4f4ebdd0da4d63ec.js","mappings":"mKAiCA,IA9BA,SAAoB,GAAsC,IAAtC,KAAEA,EAAI,QAAEC,EAAO,QAAEC,EAAO,QAAEC,GAAS,EACrD,MAAMC,EAAaJ,IACjBC,EAAQD,EAAK,EAGf,OACE,uBAAKK,MAAO,CAAEC,QAAS,OAAQC,eAAgB,WAC5CC,MAAMC,KAAK,CAAEC,OAAQC,KAAKC,KAAKV,EAAUC,KAAYU,KAAI,CAACC,EAAGC,IACxDf,IAASe,EAAQ,EAEjB,gBAACC,EAAW,CACVC,IAAG,QAAUF,EACbG,QAAS,IAAMd,EAAWW,EAAQ,GAClCI,UAAQ,GAEPJ,EAAQ,GAMb,gBAACK,EAAM,CAACH,IAAG,QAAUF,EAASG,QAAS,IAAMd,EAAWW,EAAQ,IAC7DA,EAAQ,KAMrB,EAIA,MAAMK,EAASC,EAAAA,EAAAA,OAAa,uJAatBL,EAAcK,EAAAA,EAAAA,OAAa,8G,kFCoFjC,UA9HqB,IAAgC,IAA/B,SAAEC,EAAQ,YAAEC,GAAa,EAC7C,MAAMC,GAAOC,EAAAA,EAAAA,gBAAe,cAyBtBC,EAAQF,EAAKG,OAAOC,MACpBC,EAAQL,EAAKM,KAAKC,aAAaF,OAC/B,SAAEG,EAAQ,YAAEC,GAAgBV,GAC5B,EAACvB,EAAK,EAACC,IAAWiC,EAAAA,EAAAA,UAAS,GAE3BC,EADU,GACDnC,EAAO,GAChBoC,EAAMD,EAFI,EAIhB,IAAKF,EAAa,CAChB,MAAMI,EAAgBX,EAAMY,QAC1BC,GAAQA,EAAKC,YAAYC,OAAST,IAG9BU,EAAiBL,EAAcM,MAAMR,EAAOC,GAElD,OACE,gBAAC,IAAM,CAACd,SAAUA,EAAUO,MAAOA,EAAOe,YAAY,GACpD,gBAAC,IAAG,MACHF,EAAe7B,KAAI0B,GAClB,sBAAItB,IAAKsB,EAAKM,OAAOC,KAAMzC,MAAO,CAAE0C,UAAU,SAC5C,2BACEC,UAAU,iBACVC,WAAS,EACTC,SAAS,6BAET,8BACE,0BACE,gBAAC,EAAAC,KAAI,CAACC,GAAIb,EAAKM,OAAOC,KAAMO,SAAS,OACnC,wBAAMA,SAAS,YAAYd,EAAKC,YAAYX,SAGhD,6BAAQU,EAAKC,YAAYc,OAE3B,+BACE,qBACEC,wBAAyB,CACvBC,OAAQjB,EAAKC,YAAYiB,aAAelB,EAAKmB,SAE/CL,SAAS,qBAMnB,gBAAC,IAAU,CACTrD,KAAMA,EACNC,QAASA,EACTC,QAASmC,EAAc3B,OACvBP,QA5CQ,IAgDhB,CAEA,MAAMkC,EAAgBX,EAAMY,QAC1BC,GACEA,EAAKC,YAAYC,OAAST,GAAYO,EAAKC,YAAYmB,MAAQ1B,IAG7DS,EAAiBL,EAAcM,MAAMR,EAAOC,GAElD,OACE,gBAAC,IAAM,CAACd,SAAUA,EAAUO,MAAOA,EAAOe,YAAY,GACpD,gBAAC,IAAG,MACHF,EAAe7B,KAAI0B,GAClB,sBAAItB,IAAKsB,EAAKM,OAAOC,KAAMzC,MAAO,CAAE0C,UAAU,SAC5C,2BACEC,UAAU,iBACVC,WAAS,EACTC,SAAS,6BAET,8BACE,0BACE,gBAAC,EAAAC,KAAI,CAACC,GAAIb,EAAKM,OAAOC,KAAMO,SAAS,OACnC,wBAAMA,SAAS,YAAYd,EAAKC,YAAYX,SAGhD,6BAAQU,EAAKC,YAAYc,OAE3B,+BACE,qBACEC,wBAAyB,CACvBC,OAAQjB,EAAKC,YAAYiB,aAAelB,EAAKmB,SAE/CL,SAAS,qBAMnB,gBAAC,IAAU,CACTrD,KAAMA,EACNC,QAASA,EACTC,QAASmC,EAAc3B,OACvBP,QA1FU,IA4FL,C","sources":["webpack://gatsby-starter-blog/./src/components/pagenation.js","webpack://gatsby-starter-blog/./src/templates/category-post.js"],"sourcesContent":["import React from \"react\"\r\nimport styled from \"@emotion/styled\"\r\n\r\nfunction Pagenation({ page, setPage, postNum, perPage }) {\r\n  const changePage = page => {\r\n    setPage(page)\r\n  }\r\n\r\n  return (\r\n    <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n      {Array.from({ length: Math.ceil(postNum / perPage) }).map((_, index) => {\r\n        if (page === index + 1) {\r\n          return (\r\n            <CurrentPage\r\n              key={`page-${index}`}\r\n              onClick={() => changePage(index + 1)}\r\n              disabled\r\n            >\r\n              {index + 1}\r\n            </CurrentPage>\r\n          )\r\n        }\r\n\r\n        return (\r\n          <Button key={`page-${index}`} onClick={() => changePage(index + 1)}>\r\n            {index + 1}\r\n          </Button>\r\n        )\r\n      })}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Pagenation\r\n\r\nconst Button = styled.button`\r\n  &:hover {\r\n    cursor: pointer;\r\n  }\r\n\r\n  background: white;\r\n\r\n  border: none;\r\n\r\n  font-size: 1.5rem;\r\n  padding: 0.5rem;\r\n`\r\n\r\nconst CurrentPage = styled.button`\r\n  background: white;\r\n\r\n  border: none;\r\n\r\n  font-size: 1.5rem;\r\n\r\n  padding: 0.5rem;\r\n`\r\n","import React, { useState } from \"react\"\r\nimport { useStaticQuery, graphql, Link } from \"gatsby\"\r\nimport Bio from \"../components/bio\"\r\nimport Layout from \"../components/layout\"\r\nimport Pagenation from \"../components/pagenation\"\r\n\r\nconst CategoryPost = ({ location, pageContext }) => {\r\n  const data = useStaticQuery(graphql`\r\n    query {\r\n      site {\r\n        siteMetadata {\r\n          title\r\n        }\r\n      }\r\n      allMdx {\r\n        nodes {\r\n          id\r\n          fields {\r\n            slug\r\n          }\r\n          frontmatter {\r\n            main\r\n            sub\r\n            title\r\n            date(formatString: \"MMMM DD, YYYY\")\r\n            description\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `)\r\n\r\n  const posts = data.allMdx.nodes\r\n  const title = data.site.siteMetadata.title\r\n  const { category, subcategory } = pageContext\r\n  const [page, setPage] = useState(1)\r\n  const perPage = 5\r\n  const start = (page - 1) * perPage\r\n  const end = start + perPage\r\n\r\n  if (!subcategory) {\r\n    const filteredPosts = posts.filter(\r\n      post => post.frontmatter.main === category\r\n    )\r\n\r\n    const displayedPosts = filteredPosts.slice(start, end)\r\n\r\n    return (\r\n      <Layout location={location} title={title} isCategory={true}>\r\n        <Bio />\r\n        {displayedPosts.map(post => (\r\n          <li key={post.fields.slug} style={{ listStyle: `none` }}>\r\n            <article\r\n              className=\"post-list-item\"\r\n              itemScope\r\n              itemType=\"http://schema.org/Article\"\r\n            >\r\n              <header>\r\n                <h2>\r\n                  <Link to={post.fields.slug} itemProp=\"url\">\r\n                    <span itemProp=\"headline\">{post.frontmatter.title}</span>\r\n                  </Link>\r\n                </h2>\r\n                <small>{post.frontmatter.date}</small>\r\n              </header>\r\n              <section>\r\n                <p\r\n                  dangerouslySetInnerHTML={{\r\n                    __html: post.frontmatter.description || post.excerpt,\r\n                  }}\r\n                  itemProp=\"description\"\r\n                />\r\n              </section>\r\n            </article>\r\n          </li>\r\n        ))}\r\n        <Pagenation\r\n          page={page}\r\n          setPage={setPage}\r\n          postNum={filteredPosts.length}\r\n          perPage={perPage}\r\n        ></Pagenation>\r\n      </Layout>\r\n    )\r\n  }\r\n\r\n  const filteredPosts = posts.filter(\r\n    post =>\r\n      post.frontmatter.main === category && post.frontmatter.sub === subcategory\r\n  )\r\n\r\n  const displayedPosts = filteredPosts.slice(start, end)\r\n\r\n  return (\r\n    <Layout location={location} title={title} isCategory={true}>\r\n      <Bio />\r\n      {displayedPosts.map(post => (\r\n        <li key={post.fields.slug} style={{ listStyle: `none` }}>\r\n          <article\r\n            className=\"post-list-item\"\r\n            itemScope\r\n            itemType=\"http://schema.org/Article\"\r\n          >\r\n            <header>\r\n              <h2>\r\n                <Link to={post.fields.slug} itemProp=\"url\">\r\n                  <span itemProp=\"headline\">{post.frontmatter.title}</span>\r\n                </Link>\r\n              </h2>\r\n              <small>{post.frontmatter.date}</small>\r\n            </header>\r\n            <section>\r\n              <p\r\n                dangerouslySetInnerHTML={{\r\n                  __html: post.frontmatter.description || post.excerpt,\r\n                }}\r\n                itemProp=\"description\"\r\n              />\r\n            </section>\r\n          </article>\r\n        </li>\r\n      ))}\r\n      <Pagenation\r\n        page={page}\r\n        setPage={setPage}\r\n        postNum={filteredPosts.length}\r\n        perPage={perPage}\r\n      ></Pagenation>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default CategoryPost\r\n"],"names":["page","setPage","postNum","perPage","changePage","style","display","justifyContent","Array","from","length","Math","ceil","map","_","index","CurrentPage","key","onClick","disabled","Button","styled","location","pageContext","data","useStaticQuery","posts","allMdx","nodes","title","site","siteMetadata","category","subcategory","useState","start","end","filteredPosts","filter","post","frontmatter","main","displayedPosts","slice","isCategory","fields","slug","listStyle","className","itemScope","itemType","Link","to","itemProp","date","dangerouslySetInnerHTML","__html","description","excerpt","sub"],"sourceRoot":""}