{"version":3,"file":"component---src-templates-blog-post-js-47ce7eb5660436831049.js","mappings":"uJAiDA,IAvCY,IAAuC,IAAD,UAArC,YAAEA,EAAW,MAAEC,EAAK,SAAEC,GAAU,EAC3C,MAAM,KAAEC,IAASC,EAAAA,EAAAA,gBAAe,cAgB1BC,EAAkBL,GAAeG,EAAKG,aAAaN,YACnDO,EAAgC,QAApB,EAAGJ,EAAKG,oBAAY,aAAjB,EAAmBL,MAExC,OACE,gCACE,6BAAQM,EAAkBN,EAAK,MAAMM,EAAiBN,GACtD,wBAAMO,KAAK,cAAcC,QAASJ,IAClC,wBAAMK,SAAS,WAAWD,QAASR,IACnC,wBAAMS,SAAS,iBAAiBD,QAASJ,IACzC,wBAAMK,SAAS,UAAUD,QAAQ,YACjC,wBAAMD,KAAK,eAAeC,QAAQ,YAClC,wBACED,KAAK,kBACLC,SAA0B,QAAjB,EAAAN,EAAKG,oBAAY,OAAQ,QAAR,EAAjB,EAAmBK,cAAM,WAAR,EAAjB,EAA2BC,UAAO,KAE7C,wBAAMJ,KAAK,gBAAgBC,QAASR,IACpC,wBAAMO,KAAK,sBAAsBC,QAASJ,IACzCH,EACA,C,oJC3CP,MAAMW,EAAc,qBA0BpB,MAxBiB,MACfC,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAASC,SAASC,cAAc,UACtCF,EAAOG,IAAM,gCACbH,EAAOI,aAAa,OAAQ,gBAC5BJ,EAAOI,aAAa,aAAc,YAClCJ,EAAOI,aAAa,QAAS,aAC7BJ,EAAOI,aAAa,cAAe,aACnCJ,EAAOK,OAAQ,EAEf,MAAMC,EAAWL,SAASM,eAAeT,GAKzC,OAJIQ,GAAUA,EAASE,YAAYR,GAI5B,KACL,MAAMM,EAAWL,SAASM,eAAeT,GACrCQ,IAAUA,EAASG,UAAY,GAAE,CACtC,GACA,IAEI,uBAAKC,GAAIZ,KCjBlB,MAyDaa,EAAO,IAAyC,IAAtCC,MAAQC,eAAgBC,IAAQ,EACrD,OACE,gBAAC,IAAG,CACF5B,MAAO4B,EAAKC,YAAY7B,MACxBD,YAAa6B,EAAKC,YAAY9B,aAAe6B,EAAKE,SAClD,EAIN,MAlEyB,IAGlB,IAAD,MAFJJ,MAAM,SAAEK,EAAQ,KAAEC,EAAI,KAAE9B,EAAMyB,eAAgBC,GAAM,SACpDK,GACD,EACC,MAAMC,GAA6B,QAAjB,EAAAhC,EAAKG,oBAAY,aAAjB,EAAmBL,QAAK,QAE1C,OACE,gBAAC,IAAM,CAACiC,SAAUA,EAAUjC,MAAOkC,GACjC,2BACEC,UAAU,YACVC,WAAS,EACTC,SAAS,6BAET,8BACE,sBAAIC,SAAS,YAAYV,EAAKC,YAAY7B,OAC1C,yBAAI4B,EAAKC,YAAYU,OAEvB,2BACEC,wBAAyB,CAAEC,OAAQb,EAAKc,MACxCJ,SAAS,gBAEX,2BACA,8BACE,gBAAC,IAAG,QAGR,uBAAKH,UAAU,iBACb,sBACEQ,MAAO,CACLC,QAAQ,OACRC,SAAS,OACTC,eAAe,gBACfC,UAAU,OACVC,QAAS,IAGX,0BACGjB,GACC,gBAAC,EAAAkB,KAAI,CAACC,GAAInB,EAASoB,OAAOC,KAAMC,IAAI,QAAO,KACtCtB,EAASF,YAAY7B,QAI9B,0BACGgC,GACC,gBAAC,EAAAiB,KAAI,CAACC,GAAIlB,EAAKmB,OAAOC,KAAMC,IAAI,QAC7BrB,EAAKH,YAAY7B,MAAM,SAMlC,gBAAC,EAAQ,MACF,C","sources":["webpack://gatsby-starter-blog/./src/components/seo.js","webpack://gatsby-starter-blog/./src/components/comments.js","webpack://gatsby-starter-blog/./src/templates/blog-post.js"],"sourcesContent":["/**\r\n * SEO component that queries for data with\r\n * Gatsby's useStaticQuery React hook\r\n *\r\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\r\n */\r\n\r\nimport * as React from \"react\"\r\nimport { useStaticQuery, graphql } from \"gatsby\"\r\n\r\nconst Seo = ({ description, title, children }) => {\r\n  const { site } = useStaticQuery(\r\n    graphql`\r\n      query {\r\n        site {\r\n          siteMetadata {\r\n            title\r\n            description\r\n            social {\r\n              twitter\r\n            }\r\n          }\r\n        }\r\n      }\r\n    `\r\n  )\r\n\r\n  const metaDescription = description || site.siteMetadata.description\r\n  const defaultTitle = site.siteMetadata?.title\r\n\r\n  return (\r\n    <>\r\n      <title>{defaultTitle ? `${title} | ${defaultTitle}` : title}</title>\r\n      <meta name=\"description\" content={metaDescription} />\r\n      <meta property=\"og:title\" content={title} />\r\n      <meta property=\"og:description\" content={metaDescription} />\r\n      <meta property=\"og:type\" content=\"website\" />\r\n      <meta name=\"twitter:card\" content=\"summary\" />\r\n      <meta\r\n        name=\"twitter:creator\"\r\n        content={site.siteMetadata?.social?.twitter || ``}\r\n      />\r\n      <meta name=\"twitter:title\" content={title} />\r\n      <meta name=\"twitter:description\" content={metaDescription} />\r\n      {children}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Seo\r\n","import React, { useEffect } from \"react\"\r\n\r\nconst COMMENTS_ID = \"comments-container\"\r\n\r\nconst Comments = () => {\r\n  useEffect(() => {\r\n    const script = document.createElement(\"script\")\r\n    script.src = \"https://utteranc.es/client.js\"\r\n    script.setAttribute(\"repo\", \"gptrats-tale\")\r\n    script.setAttribute(\"issue-term\", \"pathname\")\r\n    script.setAttribute(\"theme\", \"dark-blue\")\r\n    script.setAttribute(\"crossorigin\", \"anonymous\")\r\n    script.async = true\r\n\r\n    const comments = document.getElementById(COMMENTS_ID)\r\n    if (comments) comments.appendChild(script)\r\n\r\n    // This function will get called when the component unmounts\r\n    // To make sure we don't end up with multiple instances of the comments component\r\n    return () => {\r\n      const comments = document.getElementById(COMMENTS_ID)\r\n      if (comments) comments.innerHTML = \"\"\r\n    }\r\n  }, [])\r\n\r\n  return <div id={COMMENTS_ID} />\r\n}\r\n\r\nexport default Comments\r\n","import * as React from \"react\"\r\nimport { Link, graphql } from \"gatsby\"\r\n\r\nimport Bio from \"../components/bio\"\r\nimport Layout from \"../components/layout\"\r\nimport Seo from \"../components/seo\"\r\nimport Comments from \"../components/comments\"\r\n\r\nconst BlogPostTemplate = ({\r\n  data: { previous, next, site, markdownRemark: post },\r\n  location,\r\n}) => {\r\n  const siteTitle = site.siteMetadata?.title || `Title`\r\n\r\n  return (\r\n    <Layout location={location} title={siteTitle}>\r\n      <article\r\n        className=\"blog-post\"\r\n        itemScope\r\n        itemType=\"http://schema.org/Article\"\r\n      >\r\n        <header>\r\n          <h1 itemProp=\"headline\">{post.frontmatter.title}</h1>\r\n          <p>{post.frontmatter.date}</p>\r\n        </header>\r\n        <section\r\n          dangerouslySetInnerHTML={{ __html: post.html }}\r\n          itemProp=\"articleBody\"\r\n        />\r\n        <hr />\r\n        <footer>\r\n          <Bio />\r\n        </footer>\r\n      </article>\r\n      <nav className=\"blog-post-nav\">\r\n        <ul\r\n          style={{\r\n            display: `flex`,\r\n            flexWrap: `wrap`,\r\n            justifyContent: `space-between`,\r\n            listStyle: `none`,\r\n            padding: 0,\r\n          }}\r\n        >\r\n          <li>\r\n            {previous && (\r\n              <Link to={previous.fields.slug} rel=\"prev\">\r\n                ← {previous.frontmatter.title}\r\n              </Link>\r\n            )}\r\n          </li>\r\n          <li>\r\n            {next && (\r\n              <Link to={next.fields.slug} rel=\"next\">\r\n                {next.frontmatter.title} →\r\n              </Link>\r\n            )}\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n      <Comments></Comments>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport const Head = ({ data: { markdownRemark: post } }) => {\r\n  return (\r\n    <Seo\r\n      title={post.frontmatter.title}\r\n      description={post.frontmatter.description || post.excerpt}\r\n    />\r\n  )\r\n}\r\n\r\nexport default BlogPostTemplate\r\n\r\nexport const pageQuery = graphql`\r\n  query BlogPostBySlug(\r\n    $id: String!\r\n    $previousPostId: String\r\n    $nextPostId: String\r\n  ) {\r\n    site {\r\n      siteMetadata {\r\n        title\r\n      }\r\n    }\r\n    markdownRemark(id: { eq: $id }) {\r\n      id\r\n      excerpt(pruneLength: 160)\r\n      html\r\n      frontmatter {\r\n        title\r\n        date(formatString: \"MMMM DD, YYYY\")\r\n        description\r\n      }\r\n    }\r\n    previous: markdownRemark(id: { eq: $previousPostId }) {\r\n      fields {\r\n        slug\r\n      }\r\n      frontmatter {\r\n        title\r\n      }\r\n    }\r\n    next: markdownRemark(id: { eq: $nextPostId }) {\r\n      fields {\r\n        slug\r\n      }\r\n      frontmatter {\r\n        title\r\n      }\r\n    }\r\n  }\r\n`\r\n"],"names":["description","title","children","site","useStaticQuery","metaDescription","siteMetadata","defaultTitle","name","content","property","social","twitter","COMMENTS_ID","useEffect","script","document","createElement","src","setAttribute","async","comments","getElementById","appendChild","innerHTML","id","Head","data","markdownRemark","post","frontmatter","excerpt","previous","next","location","siteTitle","className","itemScope","itemType","itemProp","date","dangerouslySetInnerHTML","__html","html","style","display","flexWrap","justifyContent","listStyle","padding","Link","to","fields","slug","rel"],"sourceRoot":""}