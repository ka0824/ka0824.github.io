{"version":3,"file":"component---src-pages-using-typescript-tsx-a46051968d72b75bae24.js","mappings":"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","sources":["webpack://gatsby-starter-blog/./src/pages/using-typescript.tsx","webpack://gatsby-starter-blog/./src/templates/category.js","webpack://gatsby-starter-blog/./src/components/layout.js","webpack://gatsby-starter-blog/./src/components/seo.js"],"sourcesContent":["// If you don't want to use TypeScript you can delete this file!\r\nimport * as React from \"react\"\r\nimport { PageProps, Link, graphql, HeadFC } from \"gatsby\"\r\n\r\nimport Layout from \"../components/layout\"\r\nimport Seo from \"../components/seo\"\r\n\r\ntype DataProps = {\r\n  site: {\r\n    buildTime: string\r\n  }\r\n}\r\n\r\nconst UsingTypescript: React.FC<PageProps<DataProps>> = ({\r\n  data,\r\n  path,\r\n  location,\r\n}) => (\r\n  <Layout title=\"Using TypeScript\" location={location}>\r\n    <h1>Gatsby supports TypeScript by default!</h1>\r\n    <p>\r\n      This means that you can create and write <code>.ts/.tsx</code> files for\r\n      your pages, components, and <code>gatsby-*</code> configuration files (for\r\n      example <code>gatsby-config.ts</code>).\r\n    </p>\r\n    <p>\r\n      For type checking you'll want to install <em>typescript</em> via npm and\r\n      run <em>tsc --init</em> to create a <em>tsconfig</em> file.\r\n    </p>\r\n    <p>\r\n      You're currently on the page \"{path}\" which was built on{\" \"}\r\n      {data.site.buildTime}.\r\n    </p>\r\n    <p>\r\n      To learn more, head over to our{\" \"}\r\n      <a href=\"https://www.gatsbyjs.com/docs/how-to/custom-configuration/typescript/\">\r\n        documentation about TypeScript\r\n      </a>\r\n      .\r\n    </p>\r\n    <Link to=\"/\">Go back to the homepage</Link>\r\n  </Layout>\r\n)\r\n\r\nexport const Head: HeadFC<DataProps> = () => <Seo title=\"Using TypeScript\" />\r\n\r\nexport default UsingTypescript\r\n\r\nexport const query = graphql`\r\n  {\r\n    site {\r\n      buildTime(formatString: \"YYYY-MM-DD hh:mm a z\")\r\n    }\r\n  }\r\n`\r\n","import React from \"react\"\r\nimport { Link } from \"gatsby\"\r\nimport { useStaticQuery, graphql } from \"gatsby\"\r\n\r\nconst Category = () => {\r\n  const data = useStaticQuery(graphql`\r\n    query {\r\n      allMarkdownRemark {\r\n        totalCount\r\n        group(field: frontmatter___main) {\r\n          totalCount\r\n          fieldValue\r\n          subcategories: group(field: frontmatter___sub) {\r\n            totalCount\r\n            fieldValue\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `)\r\n\r\n  const categories = data.allMarkdownRemark.group\r\n  const totalPosts = data.allMarkdownRemark.totalCount\r\n\r\n  return (\r\n    <ul className=\"category-list\">\r\n      <Link to=\"/\">\r\n        <sape className=\"category\">전체 보기 ({totalPosts})</sape>\r\n      </Link>\r\n      {categories.map((category, index) => (\r\n        <div key={index}>\r\n          <Link to={`/category/${category.fieldValue}/`}>\r\n            <span className=\"category\">\r\n              {category.fieldValue} ({category.totalCount})\r\n            </span>\r\n          </Link>\r\n          <ul style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n            {category.subcategories.map((subcategory, index) => (\r\n              <Link\r\n                to={`/category/${category.fieldValue}/${subcategory.fieldValue}/`}\r\n                key={index}\r\n              >\r\n                <span className=\"sub-category\">\r\n                  {subcategory.fieldValue} ({subcategory.totalCount})\r\n                </span>\r\n              </Link>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      ))}\r\n    </ul>\r\n  )\r\n}\r\n\r\nexport default Category\r\n","import * as React from \"react\"\r\nimport { Link } from \"gatsby\"\r\nimport Category from \"../templates/category\"\r\n\r\nconst Layout = ({ location, title, children, isCategory }) => {\r\n  const rootPath = `${__PATH_PREFIX__}/`\r\n  const isRootPath = location.pathname === rootPath\r\n  let header\r\n\r\n  if (isRootPath || isCategory) {\r\n    header = (\r\n      <h1 className=\"main-heading\">\r\n        <Link to=\"/\">{title}</Link>\r\n      </h1>\r\n    )\r\n  } else {\r\n    header = (\r\n      <Link className=\"header-link-home\" to=\"/\">\r\n        {title}\r\n      </Link>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className=\"global-wrapper\"\r\n      data-is-root-path={isCategory === false ? rootPath : true}\r\n    >\r\n      <header className=\"global-header\">{header}</header>\r\n\r\n      <div className=\"global-main\" style={{ display: \"flex\" }}>\r\n        <Category></Category>\r\n        <main\r\n          style={{ display: \"flex\", flexDirection: \"column\", width: \"100%\" }}\r\n        >\r\n          {children}\r\n        </main>\r\n      </div>\r\n      <footer className=\"global-footer\">\r\n        © {new Date().getFullYear()}, Built with\r\n        {` `}\r\n        <a href=\"https://www.gatsbyjs.com\">Gatsby</a>\r\n      </footer>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Layout\r\n","/**\r\n * SEO component that queries for data with\r\n * Gatsby's useStaticQuery React hook\r\n *\r\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\r\n */\r\n\r\nimport * as React from \"react\"\r\nimport { useStaticQuery, graphql } from \"gatsby\"\r\n\r\nconst Seo = ({ description, title, children }) => {\r\n  const { site } = useStaticQuery(\r\n    graphql`\r\n      query {\r\n        site {\r\n          siteMetadata {\r\n            title\r\n            description\r\n            social {\r\n              twitter\r\n            }\r\n          }\r\n        }\r\n      }\r\n    `\r\n  )\r\n\r\n  const metaDescription = description || site.siteMetadata.description\r\n  const defaultTitle = site.siteMetadata?.title\r\n\r\n  return (\r\n    <>\r\n      <title>{defaultTitle ? `${title} | ${defaultTitle}` : title}</title>\r\n      <meta name=\"description\" content={metaDescription} />\r\n      <meta property=\"og:title\" content={title} />\r\n      <meta property=\"og:description\" content={metaDescription} />\r\n      <meta property=\"og:type\" content=\"website\" />\r\n      <meta name=\"twitter:card\" content=\"summary\" />\r\n      <meta\r\n        name=\"twitter:creator\"\r\n        content={site.siteMetadata?.social?.twitter || ``}\r\n      />\r\n      <meta name=\"twitter:title\" content={title} />\r\n      <meta name=\"twitter:description\" content={metaDescription} />\r\n      {children}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Seo\r\n"],"names":["Head","React","Seo","title","_ref","data","path","location","Layout","site","buildTime","href","Link","to","useStaticQuery","categories","allMarkdownRemark","group","totalPosts","totalCount","className","map","category","index","key","fieldValue","style","display","flexDirection","subcategories","subcategory","children","isCategory","header","pathname","width","Date","getFullYear","description","metaDescription","siteMetadata","defaultTitle","name","content","property","social","twitter"],"sourceRoot":""}